/**/#	Copyright (c) 1989 AT&T
/**/#	  All Rights Reserved

/**/#	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T
/**/#	The copyright notice above does not evidence any
/**/#	actual or intended publication of such source code.

/**/#ident "@(#)Imake.tmpl 1.0"

/**/#
/**/# This makefile is automatically generated by imake... do not modify
/**/# or you may lose your changes when imake generates makefiles again.
/**/# Ignore this message if you are not using imake.
/**/#

#define	YES	1
#define NO	0

#ifdef i386
# define MacroIncludeFile "a386.macros"
# define MacroFile a386.macros
#else
# ifdef u3b2
#  define MacroIncludeFile "a3b2.macros"
#  define MacroFile a3b2.macros
# else	/* Could put other macro files here for other machines */
#  define MacroIncludeFile "a386.macros"
#  define MacroFile a386.macros
# endif
#endif

#include MacroIncludeFile

/* define these as you like for server compilation */
#define	ServerCDebugFlags -O
#define ServerDefines
#define BDFTOSNFFILT -DBDFTOSNFFILT=\"$(BINDIR)/bdftosnf\"
#define SHELLPATH -DSHELLPATH=\"/bin/sh\"
#define FontFilters BDFTOSNFFILT SHELLPATH

/* This defines the extensions you want */
/* #define ExtensionDefines	-DZOID -DBEZIER */
#define ExtensionDefines

#define DebugLibX		NO	/* debugged X library */
#define ProfileLibX		NO	/* profiled X library */
#define DebugOldLibX		NO	/* debugged old X library */
#define ProfileOldLibX		NO	/* profiled old X library */
#define DebugLibXt 		NO	/* debugged toolkit library */
#define ProfileLibXt 		NO	/* profiled toolkit library */
#define DebugLibXext		NO	/* debugged Xext library */
#define ProfileLibXext		NO	/* profiled Xext library */

#define BigEndianArchitecture	NO	/* only the toolkit need this now */

/*
 * Uncomment this if you have cpp sources.
 */
/* #define CppSourcesPresent /usr/src/lib/cpp */

/*
 * use only one tab here.
 */
#define ManSuffix	n	/* for /usr/man/mann/manpage.? */

/* uncomment this if your make program has MAKEFLAGS but not MFLAGS */
#define ConstructMFLAGS

#ifdef ConstructMFLAGS
         MFLAGS = -${MAKEFLAGS}
#endif
        PATHSEP = /
         TARGET =
         DEPEND = $(DEPENDSRC)/makedepend
          IMAKE = $(IMAKESRC)/imake

   STD_INCLUDES = -I$(TOP) -I$(INCLUDESRC) -I$(SYS_INCLUDES)
       INCLUDES = $(STD_INCLUDES)
    STD_DEFINES = 
LOCAL_LIBRARIES = 
  SYS_LIBRARIES = 
  XOL_LIBRARIES = $(XOLLIB) $(XTOOLLIB) 
    X_LIBRARIES = $(XLIB) -lpt -lnls -lnsl_s
SYSAUX_LIBRARIES = -lc_s

         CFLAGS = $(CDEBUGFLAGS) $(INCLUDES) $(STD_DEFINES) $(DEFINES)
        LDFLAGS = $(CDEBUGFLAGS) $(USR_LIBRARIES) $(SYS_LIBRARIES) $(X_LIBRARIES) $(SYSAUX_LIBRARIES)
      LINTFLAGS = $(CDEBUGFLAGS) $(INCLUDES) $(STD_DEFINES) $(DEFINES)
   LINTLIBFLAGS = -o

   INSTUIDFLAGS = -m 4755
   INSTLIBFLAGS = -m 0664
   INSTSHLIBTARGETFLAGS = -m 0775
   INSTSHLIBHOSTFLAGS = -m 0664
   INSTINCFLAGS = -m 0444
   INSTMANFLAGS = -m 0444
   INSTAPPFLAGS = -m 0444

        DESTDIR = $(TOP)/../..
         BINDIR = $(DESTDIR)/bin /* for programs */
         LIBDIR = $(DESTDIR)/lib /* contains Xlib library */
        XMANDIR = $(DESTDIR)/man /* for root of MANDIR */
         MANDIR = $(DESTDIR)/man/man/**/ManSuffix

        XWINDIR = /usr/X		/* Where XWIN binary side stored */
     XWINLIBDIR = $(XWINDIR)/lib	/* XWIN libraries */

        FONTSRC = $(TOP)/fonts
     INCLUDESRC = $(TOP)/include
        UTILSRC = $(TOP)/util
      DEPENDSRC = $(UTILSRC)/makedepend
       IMAKESRC = $(UTILSRC)/imake
       IRULESRC = $(UTILSRC)/imake.includes
     XMTGRGBSRC = $(TOP)/rgb		/* Specific to MTG X Host Software */
        XMTGSRC = $(TOP)/Xmtg		/* Specific to MTG X Host Software */

           XLIB = 

      MACROFILE = MacroFile
   ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/$(MACROFILE)

      IMAKE_CMD = $(IMAKE) -TImake.tmpl $(MAKEDEFINES)
         RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a \
			tags TAGS make.log

#   if BigEndianArchitecture == YES
        DEFINES = $(SYS_DEFINES) -DLIBDIR=\"$(LIBDIR)\" -DBIGENDIAN
#   else
        DEFINES = $(SYS_DEFINES) -DLIBDIR=\"$(LIBDIR)\" 
#   endif

#include "Imake.rules"
#include INCLUDE_IMAKEFILE

MakefileTarget()
TagsTarget()

#ifdef IHaveSubdirs

CleanSubdirs($(SUBDIRS))
InstallSubdirs($(SUBDIRS))
/*
TagSubdirs($(SUBDIRS))
*/
MakefileSubdirs($(SUBDIRS))
DefaultNodeAction()

#else /* IHaveSubdirs */

CleanTarget()

install::
	@echo "install done"

DefaultLeafAction()

Makefiles::

#endif /* IHaveSubdirs */
